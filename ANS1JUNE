def arrayPairSum(nums):
    nums.sort()  # Sort the array in non-decreasing order
    max_sum = 0

    for i in range(0, len(nums), 2):
        max_sum += nums[i]

    return max_sum
=========================================================================
def maxCandies(candyType):
    max_eat = len(candyType) // 2  # Maximum number of candies Alice can eat
    unique_candies = set()  # Set to store unique candy types

    for candy in candyType:
        unique_candies.add(candy)

    return min(max_eat, len(unique_candies))
==========================================================================
def findLHS(nums):
    num_counts = {}
    max_length = 0

    for num in nums:
        num_counts[num] = num_counts.get(num, 0) + 1

    for key in num_counts:
        if key + 1 in num_counts:
            length = num_counts[key] + num_counts[key + 1]
            if length > max_length:
                max_length = length

    return max_length
=========================================================================
def canPlaceFlowers(flowerbed, n):
    count = 0
    length = len(flowerbed)
    i = 0

    while i < length:
        if flowerbed[i] == 0 and (i == 0 or flowerbed[i - 1] == 0) and (i == length - 1 or flowerbed[i + 1] == 0):
            flowerbed[i] = 1
            count += 1
            i += 2
        else:
            i += 1

    return count >= n
=========================================================================
def maximumProduct(nums):
    nums.sort()  # Sort the array in non-decreasing order

    # Calculate the product of the last three numbers and the first two numbers
    max_product = max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1])

    return max_product
======================================================================
def search(nums, target):
    left, right = 0, len(nums) - 1

    while left <= right:
        mid = (left + right) // 2

        if nums[mid] == target:
            return mid
        elif nums[mid] > target:
            right = mid - 1
        else:
            left = mid + 1

    return -1
====================================================================
def isMonotonic(nums):
    isIncreasing = True
    isDecreasing = True

    for i in range(1, len(nums)):
        if nums[i] > nums[i - 1]:
            isDecreasing = False
        if nums[i] < nums[i - 1]:
            isIncreasing = False

    return isIncreasing or isDecreasing
======================================================================
def minimumScore(nums, k):
    min_num = float('inf')
    max_num = float('-inf')

    for num in nums:
        min_num = min(min_num, num)
        max_num = max(max_num, num)

    if max_num - min_num <= 2 * k:
        return 0

    target_min = min_num + k
    target_max = max_num - k

    for i in range(len(nums)):
        if nums[i] < target_min:
            nums[i] = target_min
        elif nums[i] > target_max:
            nums[i] = target_max

    min_num = min(nums)
    max_num = max(nums)

    return max_num - min_num
